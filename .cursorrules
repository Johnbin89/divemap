# Cursor Rules for Divemap Project

## Environment Management

### Virtual Environment Requirements
- **NEVER install Python packages in the system Python**
- **ALWAYS use docker containers named divemap_db, divemap_frontend, divemap_backend to execute commands**
- **NEVER try to start frontend, backend or database on the system**
- **ALWAYS use virtual environments for Python development**
- **ALWAYS activate the virtual environment before installing packages**
- **NEVER install npm packages globally**
- **ALWAYS use project-specific node_modules**

### Python Development
```bash
# ✅ CORRECT - Always use virtual environment
cd backend
source divemap_venv/bin/activate
pip install package_name

# ❌ WRONG - Never install in system Python
pip install package_name  # This is forbidden
```

### Node.js Development
```bash
# ✅ CORRECT - Use local node_modules
npm install package_name

# ❌ WRONG - Never install globally
npm install -g package_name  # This is forbidden
```

## Database Migration Rules

### Alembic Migration Requirements
- **MUST always take a full mysql backup BEFORE any database schema changes and name it according to the latest git commit**
- **MUST use Alembic for ALL database schema changes**
- **NEVER modify database schema manually**
- **ALWAYS create migrations for schema changes**
- **ALWAYS test migrations before applying**
- **ALWAYS restore the most recent database backup when a migration script fails, and then try again with any necessary changes**

### Migration Workflow
```bash
# ✅ CORRECT - Use Alembic for migrations
cd backend
source divemap_venv/bin/activate
export PYTHONPATH="/home/kargig/src/divemap/backend/divemap_venv/lib/python3.11/site-packages:$PYTHONPATH"

# Create new migration
python create_migration.py "Description of changes"

# Run migrations
python run_migrations.py

# ❌ WRONG - Never modify database manually
# Direct SQL ALTER TABLE statements are forbidden
```

### Migration Best Practices
- Always review auto-generated migrations
- Test migrations on development database first
- Backup production database before migrations
- Use descriptive migration names
- Handle dependencies between migrations

### Migration Filename Requirements
- **MUST always use numerical ordering for migration filenames**
- **MUST follow the format: `####_descriptive_name.py` where #### is a 4-digit number**
- **MUST ensure sequential numbering (0001, 0002, 0003, etc.)**
- **MUST use descriptive names that clearly indicate the migration purpose**
- **NEVER use hash-based filenames (like `abc123_description.py`)**
- **NEVER use non-numerical prefixes or random strings**
- **ALWAYS check existing migration numbers before creating new ones**
- **ALWAYS rename any migration files that don't follow this pattern**

### Migration Filename Examples
```bash
# ✅ CORRECT - Numerical ordering with descriptive names
0001_initial.py
0002_add_max_depth_and_alternative_names.py
0003_add_country_region_fields.py
0004_add_view_count_fields.py
0005_add_user_diving_fields.py
0006_add_diving_organizations_and_user_certifications.py
0007_remove_unnecessary_certification_fields.py

# ❌ WRONG - Hash-based or non-numerical filenames
c85d7af66778_add_diving_organizations_and_user_.py
abc123_description.py
add_dive_name_and_privacy.py
consolidated_dive_system_final.py
```

### Migration Filename Workflow
```bash
# ✅ CORRECT - Check existing migrations before creating new ones
cd backend/migrations/versions
ls -la *.py | grep -E '^[0-9]{4}_' | sort

# Find the next available number
# If highest is 0017, use 0018 for the next migration

# ❌ WRONG - Don't use random or hash-based names
# Don't create: abc123_description.py
# Don't create: add_something.py
```

## Git Commit Rules

### Git Commit Requirements
- **NEVER commit to git automatically**
- **ONLY commit when explicitly requested by the user**
- **NEVER commit automatically after being previously asked to commit once, ALWAYS ask the user**
- **ALWAYS ask for permission before committing**
- **ALWAYS provide clear commit messages when requested**

### Git Workflow
```bash
# ✅ CORRECT - Only commit when user requests
# Wait for user to say: "commit these changes"

# ❌ WRONG - Never commit automatically
git add . && git commit -m "auto commit"  # This is forbidden
```

### Commit Guidelines (when user requests)
- Use descriptive commit messages
- Include affected files in commit message
- Reference issue numbers if applicable
- Test changes before committing

## Testing Requirements

### Test Environment Rules
- **ALWAYS run tests in virtual environments or within docker container**
- **NEVER run tests in system Python**
- **ALWAYS use project-specific test configurations**
- **ALWAYS use project's testing strategy document for guidance on testing**

### Backend Testing
```bash
# ✅ CORRECT - Use virtual environment for tests
cd backend
source divemap_venv/bin/activate
export PYTHONPATH="/home/kargig/src/divemap/backend/divemap_venv/lib/python3.11/site-packages:$PYTHONPATH"
python -m pytest tests/ -v

# ❌ WRONG - Never test in system Python
python -m pytest  # This is forbidden
```

### Frontend Testing
```bash
# ✅ CORRECT - Use local node_modules
npm test
node validate_frontend.js
node test_regressions.js

# ❌ WRONG - Never use global packages
npx test  # This is forbidden
```

## Credentials

You will find credentials for various users in `local_testme` file. Use them when necessary

## Documentation Requirements

### Documentation Standards
- **ALWAYS use consistent markdown formatting**
- **ALWAYS include table of contents for files > 100 lines**
- **ALWAYS include clear problem statements**
- **ALWAYS provide step-by-step solutions**
- **ALWAYS document all affected files**
- **ALWAYS include troubleshooting sections**

### Documentation Organization
- **NEVER create documentation outside the docs/ directory**
- **ALWAYS organize documentation by category (getting-started, development, deployment, security, maintenance)**
- **ALWAYS update the main docs/README.md index when adding new documentation**
- **ALWAYS use existing file names if the changes fit their titles**
- **ONLY use new file names if the content and context is VERY different from existing files**

### Documentation Workflow
- **ALWAYS test documentation procedures before committing**
- **ALWAYS include code examples and screenshots where appropriate**
- **ALWAYS verify links and references**
- **ALWAYS update related documentation when making changes**

### Documentation Templates
```markdown
# [Title]

Brief description of what this document covers.

## Table of Contents

1. [Section 1](#section-1)
2. [Section 2](#section-2)
3. [Section 3](#section-3)

## Section 1

Content with clear explanations and examples.

### Subsection

Detailed information with code examples:

```bash
# Example command
command --option value
```

## Section 2

More content with proper formatting.

## Troubleshooting

Common issues and solutions.

## Related Documentation

- [Link to related doc 1](./related-doc-1.md)
- [Link to related doc 2](./related-doc-2.md)
```

### Documentation Quality Checklist
- [ ] All links work correctly
- [ ] Code examples are tested and functional
- [ ] Screenshots are up-to-date
- [ ] Table of contents is complete
- [ ] Related documentation is updated
- [ ] No broken references
- [ ] Consistent formatting throughout

## Development Workflow

### Environment Setup
1. Always activate virtual environment first
2. Set PYTHONPATH for asdf Python environments
3. Install packages only in virtual environment
4. Test in isolated environment

### Code Changes
1. Make changes in appropriate virtual environment
2. Test changes thoroughly
3. Ask user before committing
4. Provide clear documentation for changes

### Database Changes
1. Modify SQLAlchemy models
2. Generate Alembic migration
3. Review generated migration
4. **ALWAYS rename migration file to follow numerical ordering if needed**
5. **ALWAYS check existing migration numbers before creating new ones**
6. Test migration on development database
7. Apply migration only after testing

### Documentation Changes
1. Follow documentation standards
2. Use appropriate template
3. Update related documentation
4. Test all procedures
5. Update main documentation index

## Security Requirements

### Package Installation
- Never install packages globally
- Always verify package sources
- Use pinned versions in requirements.txt
- Regularly update dependencies

### Environment Variables
- Never commit secrets to git
- Use .env files for local development
- Use environment variables in production
- Validate environment configuration

## Documentation Requirements

### Code Documentation
- Document all new features
- Update README.md for user-facing changes
- Update API_CHANGELOG.md for API changes
- Update CHANGELOG.md for all changes

### Migration Documentation
- Document all database schema changes
- Include migration files in version control
- Provide rollback instructions
- Test migration procedures

### API Documentation
- Document all API endpoints
- Include request/response examples
- Document authentication requirements
- Provide error handling examples

### Deployment Documentation
- Document deployment procedures
- Include environment setup instructions
- Document troubleshooting steps
- Provide rollback procedures

## Error Handling

### Common Issues
- **ModuleNotFoundError**: Check PYTHONPATH and virtual environment
- **Database Connection**: Verify database is running and accessible
- **Migration Failures**: Check database state and migration history
- **Package Installation**: Ensure virtual environment is activated

### Troubleshooting Steps
1. Verify virtual environment is activated
2. Check PYTHONPATH for asdf environments
3. Ensure database is running
4. Check migration status with `alembic current`
5. Verify all dependencies are installed

## Compliance Checklist

Before making any changes, ensure:
- [ ] Virtual environment is activated
- [ ] PYTHONPATH is set correctly
- [ ] No system packages are being installed
- [ ] Alembic is used for database changes
- [ ] Migration filenames follow numerical ordering (0001_, 0002_, etc.)
- [ ] Tests run in virtual environment
- [ ] User permission obtained before git commits
- [ ] Documentation is updated
- [ ] Changes are tested thoroughly
- [ ] Documentation follows standards
- [ ] All links and references are verified

## Enforcement

These rules are mandatory and must be followed:
- Violations will result in immediate correction
- System package installations are strictly forbidden
- Manual database changes are not allowed
- Automatic git commits are prohibited
- All testing must use virtual environments
- All documentation must follow standards
- All migration filenames must follow numerical ordering
- Hash-based or non-numerical migration filenames are strictly forbidden

Remember: **Always ask for permission before committing to git!** 
