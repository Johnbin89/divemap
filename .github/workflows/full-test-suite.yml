---
name: Full Test Suite

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to test against'
        required: false
        default: 'ci'
        type: choice
        options:
          - ci
          - development
          - staging
      run_backend_tests:
        description: 'Run backend tests'
        required: false
        default: true
        type: boolean
      run_frontend_tests:
        description: 'Run frontend tests'
        required: false
        default: true
        type: boolean
      run_backend_migrations:
        description: 'Run backend database migrations'
        required: false
        default: true
        type: boolean
      run_backend_coverage:
        description: 'Generate backend coverage reports'
        required: false
        default: true
        type: boolean
      run_frontend_linting:
        description: 'Run frontend ESLint checks'
        required: false
        default: true
        type: boolean
      run_frontend_unit_tests:
        description: 'Run frontend unit tests'
        required: false
        default: true
        type: boolean
      run_frontend_integration_tests:
        description: 'Run frontend integration tests'
        required: false
        default: true
        type: boolean
      run_frontend_accessibility_tests:
        description: 'Run frontend accessibility tests'
        required: false
        default: true
        type: boolean
      run_frontend_e2e_tests:
        description: 'Run frontend end-to-end tests'
        required: false
        default: true
        type: boolean
      run_frontend_build_tests:
        description: 'Run frontend build verification tests'
        required: false
        default: true
        type: boolean
      node_version:
        description: 'Node.js version to use for frontend tests'
        required: false
        default: '18.x'
        type: choice
        options:
          - '16.x'
          - '18.x'
          - '20.x'
      parallel_execution:
        description: 'Run backend and frontend tests in parallel'
        required: false
        default: true
        type: boolean

jobs:
  backend-tests:
    if: ${{ github.event.inputs.run_backend_tests != 'false' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          cd backend
          python -m venv divemap_venv
          source divemap_venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Set up environment variables
        run: |
          cd backend
          source divemap_venv/bin/activate
          export PYTHONPATH="/home/runner/work/divemap/divemap/backend/divemap_venv/lib/python3.11/site-packages:$PYTHONPATH"
          echo "PYTHONPATH=$PYTHONPATH" >> $GITHUB_ENV
          echo "DATABASE_URL=sqlite:///./test.db" >> $GITHUB_ENV
          echo "SECRET_KEY=test-secret-key-for-ci" >> $GITHUB_ENV
          echo "ENVIRONMENT=${{ github.event.inputs.environment || 'ci' }}" >> $GITHUB_ENV

      - name: Set up SQLite database
        if: ${{ github.event.inputs.run_backend_migrations != 'false' }}
        run: |
          cd backend
          source divemap_venv/bin/activate
          export DATABASE_URL="sqlite:///./test.db"
          export PYTHONPATH="/home/runner/work/divemap/divemap/backend/divemap_venv/lib/python3.11/site-packages:$PYTHONPATH"
          python -c "
          from app.database import engine
          from app.models import Base
          Base.metadata.create_all(bind=engine)
          print('✅ Database tables created successfully')
          "

      - name: Run database migrations
        if: ${{ github.event.inputs.run_backend_migrations != 'false' }}
        run: |
          cd backend
          source divemap_venv/bin/activate
          export DATABASE_URL="sqlite:///./test.db"
          export PYTHONPATH="/home/runner/work/divemap/divemap/backend/divemap_venv/lib/python3.11/site-packages:$PYTHONPATH"
          alembic upgrade head

      - name: Run backend tests
        run: |
          cd backend
          source divemap_venv/bin/activate
          python -m pytest tests/ -v --cov=app --cov-report=term-missing --cov-report=html --cov-report=xml

      - name: Upload backend coverage reports
        if: ${{ (github.event.inputs.run_backend_coverage != 'false') && always() }}
        uses: codecov/codecov-action@v5
        with:
          directory: ./backend/
          flags: backend
          name: backend-coverage
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload backend test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: backend-test-results
          path: |
            backend/htmlcov/
            backend/.pytest_cache/

  frontend-tests:
    if: ${{ github.event.inputs.run_frontend_tests != 'false' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [${{ github.event.inputs.node_version || '18.x' }}]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2

      - name: Set up Python
        uses: actions/setup-python@v4.7.1
        with:
          python-version: '3.11'

      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4.4.0
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Cache node modules
        uses: actions/cache@v4.2.3
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Cache Python dependencies
        uses: actions/cache@v4.2.3
        with:
          path: |
            ~/.cache/pip
            backend/divemap_venv
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install backend dependencies
        run: |
          cd backend
          python -m venv divemap_venv
          source divemap_venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Set up SQLite database
        run: |
          cd backend
          source divemap_venv/bin/activate
          export DATABASE_URL="sqlite:///./test_divemap.db"
          export PYTHONPATH="/home/runner/work/divemap/divemap/backend/divemap_venv/lib/python3.11/site-packages:$PYTHONPATH"
          python -c "
          from app.database import engine
          from app.models import Base
          Base.metadata.create_all(bind=engine)
          print('✅ Database tables created successfully')
          "

      - name: Run database migrations
        run: |
          cd backend
          source divemap_venv/bin/activate
          export DATABASE_URL="sqlite:///./test_divemap.db"
          export PYTHONPATH="/home/runner/work/divemap/divemap/backend/divemap_venv/lib/python3.11/site-packages:$PYTHONPATH"
          alembic upgrade head

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci --prefer-offline --no-audit --no-fund

      - name: Run ESLint checks
        if: ${{ github.event.inputs.run_frontend_linting != 'false' }}
        run: |
          cd frontend
          npx eslint src/ --ext .js,.jsx --max-warnings 0
        continue-on-error: true

      - name: Verify React app can build
        if: ${{ github.event.inputs.run_frontend_build_tests != 'false' }}
        run: |
          cd frontend
          CI=false npm run build
        env:
          GENERATE_SOURCEMAP: false

      - name: Verify package.json syntax
        run: |
          cd frontend
          node -e "JSON.parse(require('fs').readFileSync('package.json', 'utf8'))"
          echo "✅ package.json syntax is valid"

      - name: Run linting and type checking
        run: |
          cd frontend
          npm run build --if-present
          npx eslint src/ --ext .js,.jsx --max-warnings 0 || \
            echo "⚠️  Linting warnings found (non-blocking)"
        continue-on-error: true

      - name: Run unit tests
        if: ${{ github.event.inputs.run_frontend_unit_tests != 'false' }}
        run: |
          cd frontend
          npm test -- --watchAll=false --coverage --passWithNoTests --ci --silent
        env:
          CI: true

      - name: Start backend server
        run: |
          cd backend
          source divemap_venv/bin/activate
          export DATABASE_URL="sqlite:///./test_divemap.db"
          export SECRET_KEY="test_secret_key_for_ci_environment_only"
          export ALGORITHM="HS256"
          export ACCESS_TOKEN_EXPIRE_MINUTES="30"
          export GOOGLE_CLIENT_ID=""
          export GOOGLE_CLIENT_SECRET=""
          export PYTHONPATH="/home/runner/work/divemap/divemap/backend/divemap_venv/lib/python3.11/site-packages:$PYTHONPATH"
          echo "Starting FastAPI backend server..."
          uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload &
          BACKEND_PID=$!
          echo "Backend PID: $BACKEND_PID"
          echo "Waiting for backend to start..."
          sleep 10
          echo "Checking if backend is running..."
          if curl -f http://localhost:8000/health; then
            echo "✅ Backend server is running successfully"
          else
            echo "❌ Backend server failed to start"
            echo "Checking backend process..."
            ps aux | grep "uvicorn" || echo "No uvicorn process found"
            echo "Checking port 8000..."
            netstat -tlnp | grep :8000 || echo "Port 8000 not in use"
            exit 1
          fi

      - name: Start frontend development server
        run: |
          cd frontend
          echo "Starting React development server..."
          npm start &
          SERVER_PID=$!
          echo "Server PID: $SERVER_PID"
          echo "Waiting for server to start..."
          sleep 30
          echo "Checking if server is running..."
          if curl -f http://localhost:3000; then
            echo "✅ Server is running successfully"
          else
            echo "❌ Server failed to start"
            echo "Checking server process..."
            ps aux | grep "react-scripts" || echo "No react-scripts process found"
            echo "Checking port 3000..."
            netstat -tlnp | grep :3000 || echo "Port 3000 not in use"
            echo "Checking for any error logs..."
            if [ -f "npm-debug.log" ]; then
              cat npm-debug.log
            fi
            exit 1
          fi
        env:
          CI: true
          BROWSER: none
          REACT_APP_API_URL: "http://localhost:8000"

      - name: Run frontend validation tests
        if: ${{ github.event.inputs.run_frontend_accessibility_tests != 'false' }}
        run: |
          cd frontend
          npm run test:validation
        env:
          CI: true
          TEST_ACCESSIBILITY: true
          REACT_APP_API_URL: "http://localhost:8000"
        timeout-minutes: 10

      - name: Run frontend integration tests
        if: ${{ github.event.inputs.run_frontend_integration_tests != 'false' }}
        run: |
          cd frontend
          npm run test:frontend
        env:
          CI: true
          REACT_APP_API_URL: "http://localhost:8000"
        timeout-minutes: 15

      - name: Run end-to-end tests
        if: ${{ github.event.inputs.run_frontend_e2e_tests != 'false' }}
        run: |
          cd frontend
          npm run test:e2e
        env:
          CI: true
          REACT_APP_API_URL: "http://localhost:8000"
        timeout-minutes: 20

      - name: Upload frontend test results
        uses: actions/upload-artifact@v4.6.2
        if: always()
        with:
          name: frontend-test-results-${{ matrix.node-version }}
          path: |
            frontend/coverage/
            frontend/test-results/
            frontend/.nyc_output/
            frontend/accessibility-results/

      - name: Upload frontend coverage reports
        uses: codecov/codecov-action@v5.4.3
        with:
          directory: ./frontend/
          flags: frontend
          name: frontend-coverage-${{ matrix.node-version }}
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

  test-summary:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2

      - name: Generate test summary
        run: |
          echo "## 🧪 Test Suite Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Backend Tests" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.backend-tests.result }}" == "success" ]; then
            echo "✅ **Backend tests passed**" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.backend-tests.result }}" == "skipped" ]; then
            echo "⏭️ **Backend tests skipped**" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Backend tests failed**" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Frontend Tests" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.frontend-tests.result }}" == "success" ]; then
            echo "✅ **Frontend tests passed**" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.frontend-tests.result }}" == "skipped" ]; then
            echo "⏭️ **Frontend tests skipped**" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Frontend tests failed**" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Configuration" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment:** ${{ github.event.inputs.environment || 'ci' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Node.js Version:** ${{ github.event.inputs.node_version || '18.x' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Parallel Execution:** ${{ github.event.inputs.parallel_execution || 'true' }}" >> $GITHUB_STEP_SUMMARY 